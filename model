{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":11748914,"sourceType":"datasetVersion","datasetId":7375703}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# LINKEDIN POSTS ANALYSIS","metadata":{}},{"cell_type":"markdown","source":"## Abstract","metadata":{}},{"cell_type":"markdown","source":"The obtained data tables in .csv format represent all posts created on a SaaS platform used for Employer Branding activities on LinkedIn. Each table corresponds to a separate client who has an independent instance of the platform. The project's idea is to use the available variables that the user can influence to predict the potential reach of a given post. To achieve this, a regression neural network model was built. It takes the following as input: entered copy, current network, post time, and post type ['LINK' 'NATIVE_GALLERY' 'VIDEO' 'NATIVE_FILE' 'TEXT' 'DOCUMENT'], in order to estimate the actual reach of the post.\n\nInitially, the model was trained on the full spectrum of available data. However, during the learning process, it was decided to exclude posts with a reach exceeding 3,000 to reduce the impact of outliers. As a result, the focus shifted toward building an algorithm that accurately predicts the reach of most posts rather than attempting to account for rare viral outliers. Predicting highly viral posts (reach >3,000) remains challenging due to limited data. Additionally, the model could benefit from further contextual data (e.g., real-world events) to better predict unusually high-reach posts in the future.\n\nWhen using the full dataset, the mean reach was approximately 1,100, with an unscaled RMSE of around 350. After excluding posts with a reach exceeding 3,000, the mean reach decreased to ~610, and the mean RMSE improved to ~220. This adjustment not only reduced the absolute error but also improved (slightly) the modelâ€™s performance in terms of proportional accuracy.","metadata":{}},{"cell_type":"markdown","source":"## Library import","metadata":{}},{"cell_type":"code","source":"#Clearing class\nimport pandas as pd\nfrom datetime import datetime\nimport langid\n\n#Data visualization\nimport matplotlib.pyplot as plt\n\n#Tokenization & embeddings\nfrom transformers import BertTokenizer\nfrom transformers import AutoTokenizer\nfrom transformers import BertModel\nfrom tqdm import tqdm\n\n#Split & scale\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n#NN model\nimport pandas as pd\nimport torch\nimport torch.nn as nn\nfrom transformers import DistilBertModel, DistilBertTokenizer\nimport torch.nn.functional as F\nfrom torch.utils.data import TensorDataset, DataLoader","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:32:13.036348Z","iopub.execute_input":"2025-06-19T20:32:13.036609Z","iopub.status.idle":"2025-06-19T20:32:36.998503Z","shell.execute_reply.started":"2025-06-19T20:32:13.036588Z","shell.execute_reply":"2025-06-19T20:32:36.997959Z"}},"outputs":[{"name":"stderr","text":"2025-06-19 20:32:26.390250: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1750365146.581881      31 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1750365146.636413      31 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"print(f\"Number of GPUs available: {torch.cuda.device_count()}\")\nfor i in range(torch.cuda.device_count()):\n    print(f\"GPU {i} name: {torch.cuda.get_device_name(i)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:32:36.999840Z","iopub.execute_input":"2025-06-19T20:32:37.000654Z","iopub.status.idle":"2025-06-19T20:32:37.004690Z","shell.execute_reply.started":"2025-06-19T20:32:37.000634Z","shell.execute_reply":"2025-06-19T20:32:37.003958Z"}},"outputs":[{"name":"stdout","text":"Number of GPUs available: 2\nGPU 0 name: Tesla T4\nGPU 1 name: Tesla T4\n","output_type":"stream"}],"execution_count":2},{"cell_type":"markdown","source":"# Data import","metadata":{}},{"cell_type":"code","source":"still = pd.read_csv(\"/kaggle/input/data-sets-for-this-project/df_still.csv\")\nballuf = pd.read_csv(\"/kaggle/input/data-sets-for-this-project/df_balluf.csv\")\norange = pd.read_csv(\"/kaggle/input/data-sets-for-this-project/df_orange.csv\")\ncapgemini = pd.read_csv(\"/kaggle/input/data-sets-for-this-project/df_capgemini.csv\")\npmi = pd.read_csv(\"/kaggle/input/data-sets-for-this-project/df_pmi.csv\")\nbosch = pd.read_csv(\"/kaggle/input/data-sets-for-this-project/df_bosch.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:32:37.005460Z","iopub.execute_input":"2025-06-19T20:32:37.005835Z","iopub.status.idle":"2025-06-19T20:32:38.276762Z","shell.execute_reply.started":"2025-06-19T20:32:37.005812Z","shell.execute_reply":"2025-06-19T20:32:38.275952Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"dfs = {\n    \"still\": still,\n    \"balluf\": balluf,\n    \"orange\": orange,\n    \"capgemini\": capgemini,\n    \"pmi\": pmi,\n    \"bosch\": bosch\n}","metadata":{"scrolled":true,"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:32:38.277624Z","iopub.execute_input":"2025-06-19T20:32:38.277839Z","iopub.status.idle":"2025-06-19T20:32:38.281662Z","shell.execute_reply.started":"2025-06-19T20:32:38.277821Z","shell.execute_reply":"2025-06-19T20:32:38.280964Z"}},"outputs":[],"execution_count":4},{"cell_type":"markdown","source":"Note to myself: Created dict to be able to call any frames more easily","metadata":{}},{"cell_type":"code","source":"for name, df in dfs.items():\n    print(f\"{name}: {df.shape}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:32:38.283660Z","iopub.execute_input":"2025-06-19T20:32:38.283853Z","iopub.status.idle":"2025-06-19T20:32:38.297536Z","shell.execute_reply.started":"2025-06-19T20:32:38.283838Z","shell.execute_reply":"2025-06-19T20:32:38.296997Z"}},"outputs":[{"name":"stdout","text":"still: (1329, 17)\nballuf: (4892, 17)\norange: (5655, 17)\ncapgemini: (11924, 16)\npmi: (4456, 17)\nbosch: (9798, 17)\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"for name, df_value in dfs.items():\n    if \"details_type\" in df_value.columns:\n        print(f\"{name}: {df_value['details_type'].unique()}\")\n    else:\n        print(f\"DataFrame '{name}' does not have a 'details_type' column.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:32:38.298090Z","iopub.execute_input":"2025-06-19T20:32:38.298329Z","iopub.status.idle":"2025-06-19T20:32:38.319850Z","shell.execute_reply.started":"2025-06-19T20:32:38.298313Z","shell.execute_reply":"2025-06-19T20:32:38.319203Z"}},"outputs":[{"name":"stdout","text":"still: ['LINK' 'NATIVE_GALLERY' 'VIDEO' 'NATIVE_FILE' 'TEXT' 'DOCUMENT']\nballuf: ['LINK' 'NATIVE_FILE' 'VIDEO' 'NATIVE_GALLERY' 'DOCUMENT' 'TEXT' 'FILE']\norange: ['LINK' 'NATIVE_FILE' 'DOCUMENT' 'NATIVE_GALLERY' 'TEXT' 'VIDEO']\ncapgemini: ['VIDEO' 'LINK' 'NATIVE_FILE' 'NATIVE_GALLERY' 'DOCUMENT' 'TEXT']\npmi: ['LINK' 'NATIVE_GALLERY' 'NATIVE_FILE' 'DOCUMENT' 'TEXT' 'VIDEO']\nbosch: ['TEXT' 'NATIVE_FILE' 'LINK' 'NATIVE_GALLERY' 'DOCUMENT' 'VIDEO' 'JOB']\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"## Clearing dataframes","metadata":{}},{"cell_type":"code","source":"class DataProcessor:\n\n    def __init__(self, df: pd.DataFrame):\n        self.df = df\n        self.df_lang = None\n        self.df_pl = None\n        self.df_eng = None\n\n    #choose specific columns\n    def clean(self):\n        required_cols = [\"comment\", \"published_at\", \"details_type\", \n                         \"estimated_covearage\", \"user_network_at_stats_check_date\", \"language\"]\n        self.df = self.df[required_cols]\n        self.df = self.df.dropna(subset=[\"estimated_covearage\"])\n\n        self.df = self.df.dropna(subset=[\"comment\", \"published_at\", \"details_type\", \n                         \"estimated_covearage\", \"user_network_at_stats_check_date\"])\n\n        self.df.rename(columns={\"estimated_covearage\": \"reach\"}, inplace=True)\n        self.df.rename(columns={\"user_network_at_stats_check_date\": \"n_followers\"}, inplace=True)\n        self.df.rename(columns={\"comment\": \"copy\"}, inplace=True)\n        self.df.rename(columns={\"details_type\": \"post_format\"}, inplace=True)\n\n        allowed_formats = ['LINK', 'NATIVE_GALLERY', 'VIDEO', 'NATIVE_FILE', 'TEXT', 'DOCUMENT']\n        \n        self.df = self.df[self.df['post_format'].isin(allowed_formats)]\n        \n    #add translation + \"en\" label\n    def lang_processing(self):\n\n        mask = self.df[\"language\"].isna()\n        self.df.loc[mask, \"language\"] = self.df.loc[mask, \"copy\"].apply(lambda x: langid.classify(x)[0])\n        self.df = self.df[self.df[\"language\"] == \"en\"]\n\n        self.df = self.df.drop(columns=[\"language\"])\n\n    def hot_encoding(self):\n\n        def map_time_of_day(hour):\n            if 6 <= hour < 10:\n                return 'morning'\n            elif 10 <= hour < 14:\n                return 'noon'\n            elif 14 <= hour < 18:\n                return 'afternoon'\n            elif 18 <= hour < 22:\n                return 'evening'\n            else:\n                return 'night'\n        \n        self.df['published_at'] = pd.to_datetime(self.df['published_at'])\n\n        self.df['post_time'] = self.df['published_at'].dt.hour.apply(lambda x: map_time_of_day(x))\n\n        post_time_one_hot = pd.get_dummies(self.df['post_time'], prefix='post_time').astype(int)\n\n        details_type_one_hot = pd.get_dummies(self.df['post_format'], prefix='post_format').astype(int)\n\n        self.df = pd.concat([self.df, post_time_one_hot, details_type_one_hot], axis=1)\n        \n        self.df = self.df.drop(columns=['published_at', 'post_time', 'post_format'])\n\n    def float_to_int(self):\n\n        cols_to_cast = [\"reach\", \"n_followers\"]\n\n        for col in cols_to_cast:\n            self.df[col] = self.df[col].apply(lambda x: int(x))\n\n    def reset(self):\n        \n        self.df.reset_index(drop=True, inplace=True)\n\n    def process_all(self):\n        \n        self.clean()  \n        self.lang_processing()\n        self.hot_encoding()\n        self.float_to_int()\n        self.reset()\n\n        \n        return self.df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:32:38.320432Z","iopub.execute_input":"2025-06-19T20:32:38.320629Z","iopub.status.idle":"2025-06-19T20:32:38.334797Z","shell.execute_reply.started":"2025-06-19T20:32:38.320615Z","shell.execute_reply":"2025-06-19T20:32:38.334162Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"processed_dfs = {}\n\nfor name, df in dfs.items():\n    processor = DataProcessor(df)\n    processed_df = processor.process_all()\n    processed_dfs[name] = processed_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:32:38.335392Z","iopub.execute_input":"2025-06-19T20:32:38.335928Z","iopub.status.idle":"2025-06-19T20:33:10.327095Z","shell.execute_reply.started":"2025-06-19T20:32:38.335911Z","shell.execute_reply":"2025-06-19T20:33:10.326195Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"for name, df in processed_dfs.items():\n    print(f\"{name}: {df.shape}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:33:10.328052Z","iopub.execute_input":"2025-06-19T20:33:10.328344Z","iopub.status.idle":"2025-06-19T20:33:10.333421Z","shell.execute_reply.started":"2025-06-19T20:33:10.328314Z","shell.execute_reply":"2025-06-19T20:33:10.332589Z"}},"outputs":[{"name":"stdout","text":"still: (3, 7)\nballuf: (2752, 14)\norange: (65, 10)\ncapgemini: (5597, 14)\npmi: (2536, 14)\nbosch: (3899, 14)\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"selected_keys = [\"pmi\", \"bosch\", \"balluf\", \"capgemini\"]\ndfs = {key: processed_dfs[key] for key in selected_keys}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:33:10.334314Z","iopub.execute_input":"2025-06-19T20:33:10.334580Z","iopub.status.idle":"2025-06-19T20:33:10.349096Z","shell.execute_reply.started":"2025-06-19T20:33:10.334563Z","shell.execute_reply":"2025-06-19T20:33:10.348352Z"}},"outputs":[],"execution_count":10},{"cell_type":"markdown","source":"## Sanity check if datasets have same number of columns","metadata":{}},{"cell_type":"code","source":"for name, df in dfs.items():\n    print(f\"{name}: {df.shape}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:33:10.349838Z","iopub.execute_input":"2025-06-19T20:33:10.350013Z","iopub.status.idle":"2025-06-19T20:33:10.365833Z","shell.execute_reply.started":"2025-06-19T20:33:10.349999Z","shell.execute_reply":"2025-06-19T20:33:10.365150Z"}},"outputs":[{"name":"stdout","text":"pmi: (2536, 14)\nbosch: (3899, 14)\nballuf: (2752, 14)\ncapgemini: (5597, 14)\n","output_type":"stream"}],"execution_count":11},{"cell_type":"markdown","source":"## Final check if there are any empty or NaN cells ","metadata":{}},{"cell_type":"code","source":"for name, df in dfs.items():\n    mask = df.isna() | (df == \"\")\n    rows_with_empty_or_nan = mask.any(axis=1)\n    count = rows_with_empty_or_nan.sum()\n    print(f\"{name}: {count} rows have NaN or empty string\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:33:10.366647Z","iopub.execute_input":"2025-06-19T20:33:10.366884Z","iopub.status.idle":"2025-06-19T20:33:10.390590Z","shell.execute_reply.started":"2025-06-19T20:33:10.366863Z","shell.execute_reply":"2025-06-19T20:33:10.389870Z"}},"outputs":[{"name":"stdout","text":"pmi: 0 rows have NaN or empty string\nbosch: 0 rows have NaN or empty string\nballuf: 0 rows have NaN or empty string\ncapgemini: 0 rows have NaN or empty string\n","output_type":"stream"}],"execution_count":12},{"cell_type":"markdown","source":"# Tokenization","metadata":{}},{"cell_type":"code","source":"balluf = dfs[\"balluf\"]\ncapgemini = dfs[\"capgemini\"]\npmi = dfs[\"pmi\"]\nbosch = dfs[\"bosch\"]\n\ncombined_df = pd.concat([dfs[\"balluf\"], dfs[\"capgemini\"], dfs[\"pmi\"], dfs[\"bosch\"]], axis=0)\ncombined_df = combined_df.reset_index(drop=True)\n\ncombined_df = combined_df[combined_df['reach'] <= 3000] ### decided to cut off the rest\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:33:10.391395Z","iopub.execute_input":"2025-06-19T20:33:10.391705Z","iopub.status.idle":"2025-06-19T20:33:10.403347Z","shell.execute_reply.started":"2025-06-19T20:33:10.391679Z","shell.execute_reply":"2025-06-19T20:33:10.402737Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n\ntqdm.pandas()\n\ndef tokenize_text(text):\n    return tokenizer(\n        text,\n        padding=True,     \n        truncation=True,\n        max_length=512,\n        return_tensors=\"pt\"        \n    )\n\ncombined_df['tokens'] = combined_df['copy'].progress_apply(tokenize_text)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:33:10.409355Z","iopub.execute_input":"2025-06-19T20:33:10.410104Z","iopub.status.idle":"2025-06-19T20:33:46.354031Z","shell.execute_reply.started":"2025-06-19T20:33:10.410074Z","shell.execute_reply":"2025-06-19T20:33:46.353278Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/48.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6468ac2fd74a438fb978b43bb3a1d790"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"38855cc0f66e478c9941b56edf8b9ca7"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"edee1c622c584629a70d3b4eb08ce187"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/570 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"81677e7616fd45fcb9e186bd46d0b451"}},"metadata":{}},{"name":"stderr","text":"100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 13991/13991 [00:34<00:00, 403.59it/s]\n","output_type":"stream"}],"execution_count":14},{"cell_type":"markdown","source":"Note to myself: Used \"uncased\" model here to lower the amount of time to run code","metadata":{}},{"cell_type":"markdown","source":"# Embeddings","metadata":{}},{"cell_type":"code","source":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:33:46.355184Z","iopub.execute_input":"2025-06-19T20:33:46.355736Z","iopub.status.idle":"2025-06-19T20:33:46.359361Z","shell.execute_reply.started":"2025-06-19T20:33:46.355714Z","shell.execute_reply":"2025-06-19T20:33:46.358642Z"}},"outputs":[{"name":"stdout","text":"Using device: cuda\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"model = BertModel.from_pretrained('bert-base-uncased')\nmodel.to(device)\nmodel.eval()\n\ntorch.set_grad_enabled(False)\n\nembeddings = []\n\nfor token_dict in tqdm(combined_df[\"tokens\"], desc=\"Generating embeddings\"):\n    input_ids = token_dict['input_ids'].to(device)\n    token_type_ids = token_dict['token_type_ids'].to(device)\n    attention_mask = token_dict['attention_mask'].to(device)\n\n    outputs = model(input_ids=input_ids,\n                    token_type_ids=token_type_ids,\n                    attention_mask=attention_mask)\n\n    cls_embedding = outputs.last_hidden_state[:, 0, :].squeeze(0).detach().cpu()\n    embeddings.append(cls_embedding)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:33:46.360044Z","iopub.execute_input":"2025-06-19T20:33:46.360441Z","iopub.status.idle":"2025-06-19T20:37:08.176517Z","shell.execute_reply.started":"2025-06-19T20:33:46.360419Z","shell.execute_reply":"2025-06-19T20:37:08.175801Z"}},"outputs":[{"name":"stderr","text":"Xet Storage is enabled for this repo, but the 'hf_xet' package is not installed. Falling back to regular HTTP download. For better performance, install the package with: `pip install huggingface_hub[hf_xet]` or `pip install hf_xet`\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/440M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4d8226b6088e4bf8ae04509d09991d80"}},"metadata":{}},{"name":"stderr","text":"Generating embeddings: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 13991/13991 [03:18<00:00, 70.44it/s]\n","output_type":"stream"}],"execution_count":16},{"cell_type":"markdown","source":"Note to myself: Here I turned off grading, which makes impossible adding grading later if not turned on.","metadata":{}},{"cell_type":"code","source":"combined_df[\"embeddings\"] = embeddings","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:08.177342Z","iopub.execute_input":"2025-06-19T20:37:08.177667Z","iopub.status.idle":"2025-06-19T20:37:08.805048Z","shell.execute_reply.started":"2025-06-19T20:37:08.177641Z","shell.execute_reply":"2025-06-19T20:37:08.804508Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"all_shapes = [e.shape for e in combined_df[\"embeddings\"]]\nprint(set(all_shapes))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:08.805734Z","iopub.execute_input":"2025-06-19T20:37:08.805986Z","iopub.status.idle":"2025-06-19T20:37:08.818583Z","shell.execute_reply.started":"2025-06-19T20:37:08.805964Z","shell.execute_reply":"2025-06-19T20:37:08.817842Z"}},"outputs":[{"name":"stdout","text":"{torch.Size([768])}\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"print(combined_df[\"embeddings\"][0].dtype)     # should be torch.float32\nprint(combined_df[\"embeddings\"][0].device)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:08.819330Z","iopub.execute_input":"2025-06-19T20:37:08.819597Z","iopub.status.idle":"2025-06-19T20:37:08.834739Z","shell.execute_reply.started":"2025-06-19T20:37:08.819581Z","shell.execute_reply":"2025-06-19T20:37:08.833781Z"}},"outputs":[{"name":"stdout","text":"torch.float32\ncpu\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"combined_df.columns.tolist()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:08.835625Z","iopub.execute_input":"2025-06-19T20:37:08.835861Z","iopub.status.idle":"2025-06-19T20:37:08.849425Z","shell.execute_reply.started":"2025-06-19T20:37:08.835841Z","shell.execute_reply":"2025-06-19T20:37:08.848768Z"}},"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"['copy',\n 'reach',\n 'n_followers',\n 'post_time_afternoon',\n 'post_time_evening',\n 'post_time_morning',\n 'post_time_night',\n 'post_time_noon',\n 'post_format_DOCUMENT',\n 'post_format_LINK',\n 'post_format_NATIVE_FILE',\n 'post_format_NATIVE_GALLERY',\n 'post_format_TEXT',\n 'post_format_VIDEO',\n 'tokens',\n 'embeddings']"},"metadata":{}}],"execution_count":20},{"cell_type":"code","source":"n_followers = torch.tensor(combined_df['n_followers'].values).unsqueeze(1).float()\nreach = torch.tensor(combined_df['reach'].values).unsqueeze(1).float()\n\npost_time_columns = ['post_time_afternoon', 'post_time_evening', 'post_time_morning', 'post_time_night', 'post_time_noon']\n\npost_time = torch.tensor(combined_df[post_time_columns].values) \n\nformats_columns = ['post_format_DOCUMENT', 'post_format_LINK', 'post_format_NATIVE_FILE', \n                   'post_format_NATIVE_GALLERY', 'post_format_TEXT', 'post_format_VIDEO']\n\nformats = torch.tensor(combined_df[formats_columns].values)\n\nembeddings = torch.stack(combined_df['embeddings'].values.tolist()) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:08.850170Z","iopub.execute_input":"2025-06-19T20:37:08.850409Z","iopub.status.idle":"2025-06-19T20:37:08.890106Z","shell.execute_reply.started":"2025-06-19T20:37:08.850387Z","shell.execute_reply":"2025-06-19T20:37:08.889440Z"}},"outputs":[],"execution_count":21},{"cell_type":"markdown","source":"## Final size check","metadata":{}},{"cell_type":"code","source":"print(n_followers.size())\nprint(post_time.size())\nprint(formats.size())\nprint(embeddings.size())\nprint(reach.size())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:08.890865Z","iopub.execute_input":"2025-06-19T20:37:08.891130Z","iopub.status.idle":"2025-06-19T20:37:08.895177Z","shell.execute_reply.started":"2025-06-19T20:37:08.891114Z","shell.execute_reply":"2025-06-19T20:37:08.894675Z"}},"outputs":[{"name":"stdout","text":"torch.Size([13991, 1])\ntorch.Size([13991, 5])\ntorch.Size([13991, 6])\ntorch.Size([13991, 768])\ntorch.Size([13991, 1])\n","output_type":"stream"}],"execution_count":22},{"cell_type":"markdown","source":"## Concat them together","metadata":{}},{"cell_type":"code","source":"X = torch.cat([n_followers, post_time, formats, embeddings], dim=1)\ny = reach","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:08.895892Z","iopub.execute_input":"2025-06-19T20:37:08.896672Z","iopub.status.idle":"2025-06-19T20:37:08.945986Z","shell.execute_reply.started":"2025-06-19T20:37:08.896650Z","shell.execute_reply":"2025-06-19T20:37:08.945276Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"print(X.size())\nprint(y.size())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:08.946795Z","iopub.execute_input":"2025-06-19T20:37:08.946993Z","iopub.status.idle":"2025-06-19T20:37:08.951105Z","shell.execute_reply.started":"2025-06-19T20:37:08.946977Z","shell.execute_reply":"2025-06-19T20:37:08.950531Z"}},"outputs":[{"name":"stdout","text":"torch.Size([13991, 780])\ntorch.Size([13991, 1])\n","output_type":"stream"}],"execution_count":24},{"cell_type":"markdown","source":"# Train/val/test split","metadata":{}},{"cell_type":"code","source":"X_np = X.numpy()\ny_np = y.numpy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:08.951775Z","iopub.execute_input":"2025-06-19T20:37:08.951967Z","iopub.status.idle":"2025-06-19T20:37:08.965728Z","shell.execute_reply.started":"2025-06-19T20:37:08.951953Z","shell.execute_reply":"2025-06-19T20:37:08.965101Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"# First split: train (70%) vs temp (30%)\nX_train, X_temp, y_train, y_temp = train_test_split(X_np, y_np, test_size=0.3, random_state=42)\n\n# Second split: val (15%) vs test (15%)\nX_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:08.966334Z","iopub.execute_input":"2025-06-19T20:37:08.966583Z","iopub.status.idle":"2025-06-19T20:37:08.999253Z","shell.execute_reply.started":"2025-06-19T20:37:08.966567Z","shell.execute_reply":"2025-06-19T20:37:08.998548Z"}},"outputs":[],"execution_count":26},{"cell_type":"markdown","source":"## Standard Scaler","metadata":{}},{"cell_type":"code","source":"scaler_x = StandardScaler()\nscaler_y = StandardScaler()\n\nX_train_scaled = scaler_x.fit_transform(X_train)\nX_val_scaled = scaler_x.transform(X_val)\nX_test_scaled = scaler_x.transform(X_test)\n\ny_train_scaled = scaler_y.fit_transform(y_train)\ny_val_scaled = scaler_y.transform(y_val)\ny_test_scaled = scaler_y.transform(y_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:08.999994Z","iopub.execute_input":"2025-06-19T20:37:09.000232Z","iopub.status.idle":"2025-06-19T20:37:09.206787Z","shell.execute_reply.started":"2025-06-19T20:37:09.000207Z","shell.execute_reply":"2025-06-19T20:37:09.206204Z"}},"outputs":[],"execution_count":27},{"cell_type":"markdown","source":"## Back to tensors","metadata":{}},{"cell_type":"code","source":"X_train = torch.tensor(X_train_scaled, dtype=torch.float32)\nX_val = torch.tensor(X_val_scaled, dtype=torch.float32)\nX_test = torch.tensor(X_test_scaled, dtype=torch.float32)\n\ny_train = torch.tensor(y_train_scaled, dtype=torch.float32)\ny_val = torch.tensor(y_val_scaled, dtype=torch.float32)\ny_test = torch.tensor(y_test_scaled, dtype=torch.float32)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:09.207525Z","iopub.execute_input":"2025-06-19T20:37:09.207763Z","iopub.status.idle":"2025-06-19T20:37:09.226740Z","shell.execute_reply.started":"2025-06-19T20:37:09.207743Z","shell.execute_reply":"2025-06-19T20:37:09.226212Z"}},"outputs":[],"execution_count":28},{"cell_type":"markdown","source":"# Data visualization","metadata":{}},{"cell_type":"code","source":"combined_df['n_followers'].hist(bins=20)\nplt.title('Distribution of Ambassadors Network')\nplt.xlabel('Followers')\nplt.ylabel('Frequency')\nplt.grid(axis='y', alpha=0.75)\nplt.show()\n\nprint(combined_df[\"n_followers\"].mean())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:09.227446Z","iopub.execute_input":"2025-06-19T20:37:09.227714Z","iopub.status.idle":"2025-06-19T20:37:09.485045Z","shell.execute_reply.started":"2025-06-19T20:37:09.227692Z","shell.execute_reply":"2025-06-19T20:37:09.484349Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"1280.7836466299764\n","output_type":"stream"}],"execution_count":29},{"cell_type":"code","source":"combined_df['reach'].hist(bins=20)\nplt.title('Distribution of LinkedIn Post Reach')\nplt.xlabel('Reach (Number of Views/People)')\nplt.ylabel('Frequency')\nplt.grid(axis='y', alpha=0.75)\nplt.show()\n\nprint(combined_df[\"reach\"].mean())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:09.485915Z","iopub.execute_input":"2025-06-19T20:37:09.486171Z","iopub.status.idle":"2025-06-19T20:37:09.641177Z","shell.execute_reply.started":"2025-06-19T20:37:09.486149Z","shell.execute_reply":"2025-06-19T20:37:09.640557Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"611.0094346365521\n","output_type":"stream"}],"execution_count":30},{"cell_type":"markdown","source":"Conclusion - \"reach\" and \"n_followers\" are heavily skewed to right. Which means the log-transformation could be used here, but when applied - RMSE in every model was doubled.","metadata":{}},{"cell_type":"markdown","source":"## Sanity check if they are correctly split ","metadata":{}},{"cell_type":"code","source":"print(X_train.size())\nprint(X_val.size())\nprint(X_test.size())\n\nprint(X.size())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:09.641861Z","iopub.execute_input":"2025-06-19T20:37:09.642075Z","iopub.status.idle":"2025-06-19T20:37:09.645983Z","shell.execute_reply.started":"2025-06-19T20:37:09.642050Z","shell.execute_reply":"2025-06-19T20:37:09.645447Z"}},"outputs":[{"name":"stdout","text":"torch.Size([9793, 780])\ntorch.Size([2099, 780])\ntorch.Size([2099, 780])\ntorch.Size([13991, 780])\n","output_type":"stream"}],"execution_count":31},{"cell_type":"markdown","source":"# Neural network","metadata":{}},{"cell_type":"code","source":"torch.set_grad_enabled(True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:09.646713Z","iopub.execute_input":"2025-06-19T20:37:09.647130Z","iopub.status.idle":"2025-06-19T20:37:09.659952Z","shell.execute_reply.started":"2025-06-19T20:37:09.647106Z","shell.execute_reply":"2025-06-19T20:37:09.659361Z"}},"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"<torch.autograd.grad_mode.set_grad_enabled at 0x7b0b1341de10>"},"metadata":{}}],"execution_count":32},{"cell_type":"markdown","source":"Note to myself: Have to remeber to enable grad everytime before feeding models. It was turned off by BertModel and caused lot of problems","metadata":{}},{"cell_type":"code","source":"X_train = X_train.to(device) \ny_train = y_train.to(device) \nX_val = X_val.to(device)     \ny_val = y_val.to(device)     ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:09.660761Z","iopub.execute_input":"2025-06-19T20:37:09.661325Z","iopub.status.idle":"2025-06-19T20:37:09.684426Z","shell.execute_reply.started":"2025-06-19T20:37:09.661302Z","shell.execute_reply":"2025-06-19T20:37:09.684050Z"}},"outputs":[],"execution_count":33},{"cell_type":"markdown","source":"Note to myself: In order to use GPU everything has to be placed on the device","metadata":{}},{"cell_type":"code","source":"class Model(nn.Module):\n    def __init__(self, in_features=780, h1=8, h2=6, output=1):\n        super().__init__()\n        self.fc1 = nn.Linear(in_features, h1)\n        self.fc2 = nn.Linear(h1, h2)\n        self.out = nn.Linear(h2, output)\n\n    def forward(self, x):\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.out(x)\n        return x","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:09.685169Z","iopub.execute_input":"2025-06-19T20:37:09.685902Z","iopub.status.idle":"2025-06-19T20:37:09.690210Z","shell.execute_reply.started":"2025-06-19T20:37:09.685879Z","shell.execute_reply":"2025-06-19T20:37:09.689539Z"}},"outputs":[],"execution_count":34},{"cell_type":"code","source":"class FlexibleModel(nn.Module):\n    def __init__(self, in_features, hidden_layers_sizes, output_size=1, dropout_prob=0.5):\n        super().__init__()\n        self.layers = nn.ModuleList() \n        self.dropouts = nn.ModuleList()\n\n        current_in_features = in_features \n\n        for h_size in hidden_layers_sizes:\n            self.layers.append(nn.Linear(current_in_features, h_size))\n            self.dropouts.append(nn.Dropout(dropout_prob)) \n            current_in_features = h_size\n\n        self.out = nn.Linear(current_in_features, output_size)\n\n    def forward(self, x):\n        for layer, dropout in zip(self.layers, self.dropouts):\n            x = F.relu(layer(x))  \n            x = dropout(x)        \n        x = self.out(x)           \n        return x","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:09.690734Z","iopub.execute_input":"2025-06-19T20:37:09.690886Z","iopub.status.idle":"2025-06-19T20:37:09.704794Z","shell.execute_reply.started":"2025-06-19T20:37:09.690874Z","shell.execute_reply":"2025-06-19T20:37:09.704131Z"}},"outputs":[],"execution_count":35},{"cell_type":"markdown","source":"Note to myself: To create NN model, it has to include: \n1. __init__ contructor with chosen features, then goes every layer which has to match with previous + out layer\n2. def foward which consists of layer activators\n3. in order to make the model more flexible it has to include for loop in order to create x layers","metadata":{}},{"cell_type":"markdown","source":"### NN MODELS","metadata":{}},{"cell_type":"markdown","source":"## Simple model","metadata":{}},{"cell_type":"code","source":"num_epochs = 2500\nloss_list = []\nval_loss_list = []\n\nmodel_nn = Model(in_features=780)\noptimizer = torch.optim.Adam(model_nn.parameters(), lr=0.01, weight_decay=0.01)\ncriterion = nn.MSELoss()\n\nmodel_nn = nn.DataParallel(model_nn)\nmodel_nn.to(device)\n\nfor epoch in range(num_epochs):\n    model_nn.train()\n\n    # Forward pass\n    y_pred = model_nn(X_train)\n    loss = F.mse_loss(y_pred, y_train)\n\n    # Backward + optimize\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n\n    loss_list.append(loss.item())\n\n    # Validation\n    model_nn.eval()\n    with torch.no_grad():\n        val_pred = model_nn(X_val)\n        val_loss = F.mse_loss(val_pred, y_val)\n        val_loss_list.append(val_loss.item())\n\nplt.plot(loss_list, label='Train Loss')\nplt.plot(val_loss_list, label='Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.title('Training and Validation Loss Over Epochs')\nplt.legend()\nplt.show()\n\nmodel_nn.eval()\nwith torch.no_grad():\n\n    overall_train_pred_scaled = model_nn(X_train)\n    overall_val_pred_scaled = model_nn(X_val)\n\n    overall_train_pred_unscaled_np = scaler_y.inverse_transform(overall_train_pred_scaled.detach().cpu().numpy())\n    overall_val_pred_unscaled_np = scaler_y.inverse_transform(overall_val_pred_scaled.detach().cpu().numpy())\n\n    \n    y_train_unscaled_np = scaler_y.inverse_transform(y_train.detach().cpu().numpy())\n    y_val_unscaled_np = scaler_y.inverse_transform(y_val.detach().cpu().numpy())\n\n    overall_mse_train_unscaled = np.mean((overall_train_pred_unscaled_np - y_train_unscaled_np)**2)\n    overall_mse_val_unscaled = np.mean((overall_val_pred_unscaled_np - y_val_unscaled_np)**2)\n\n    overall_rmse_val_unscaled = np.sqrt(overall_mse_val_unscaled)\n\n\nprint(f\"Overall MSE on the train set: {overall_mse_train_unscaled.item():.4f}\")\nprint(f\"Overall MSE on the validation set: {overall_mse_val_unscaled.item():.4f}\")\nprint(f\"Overall RMSE on the validation set: {overall_rmse_val_unscaled.item():.0f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:09.705526Z","iopub.execute_input":"2025-06-19T20:37:09.705760Z","iopub.status.idle":"2025-06-19T20:37:25.250935Z","shell.execute_reply.started":"2025-06-19T20:37:09.705738Z","shell.execute_reply":"2025-06-19T20:37:25.250288Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/torch/nn/modules/linear.py:125: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at ../aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n  return F.linear(input, self.weight, self.bias)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Overall MSE on the train set: 27285.9512\nOverall MSE on the validation set: 73544.9375\nOverall RMSE on the validation set: 271\n","output_type":"stream"}],"execution_count":36},{"cell_type":"markdown","source":"## Config model 1","metadata":{}},{"cell_type":"code","source":"hidden_config_1 = [128, 64]\nmodel_1 = FlexibleModel(in_features=780, hidden_layers_sizes=hidden_config_1, dropout_prob=0.5)\nprint(\"Model 1:\")\n\noptimizer_1 = torch.optim.Adam(model_1.parameters(), lr=0.001, weight_decay=0.01)\n\nmodel_1 = nn.DataParallel(model_1)\nmodel_1.to(device)\n\nnum_epochs = 1500\nloss_list1 = []\nval_loss_list1 = []\n\nfor epoch in range(num_epochs):\n    model_1.train()\n\n    # Forward pass\n    y_pred = model_1(X_train)\n    loss = F.mse_loss(y_pred, y_train)\n\n    # Backward + optimize\n    optimizer_1.zero_grad()\n    loss.backward()\n    optimizer_1.step()\n\n    loss_list1.append(loss.item())\n\n    # Validation\n    model_1.eval()\n    with torch.no_grad():\n        val_pred = model_1(X_val)\n        val_loss = F.mse_loss(val_pred, y_val)\n        val_loss_list1.append(val_loss.item())\n\nplt.plot(loss_list1, label='Train Loss')\nplt.plot(val_loss_list1, label='Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.title('Training and Validation Loss Over Epochs')\nplt.legend()\nplt.show()\n\nmodel_1.eval()\nwith torch.no_grad():\n    # Get scaled predictions\n    overall_train_pred_scaled = model_1(X_train)\n    overall_val_pred_scaled = model_1(X_val)\n    \n    # Calculate scaled MSE (0-1 range)\n    scaled_mse_train = F.mse_loss(overall_train_pred_scaled, y_train).item()\n    scaled_mse_val = F.mse_loss(overall_val_pred_scaled, y_val).item()\n\n    train_pred_unscaled = scaler_y.inverse_transform(overall_train_pred_scaled.detach().cpu().numpy())\n    val_pred_unscaled = scaler_y.inverse_transform(overall_val_pred_scaled.detach().cpu().numpy())\n    \n    # Then inverse transform the true values\n    y_train_unscaled = scaler_y.inverse_transform(y_train.detach().cpu().numpy())\n    y_val_unscaled = scaler_y.inverse_transform(y_val.detach().cpu().numpy())\n\n    # Now calculate MSE on original scale\n    mse_train_unscaled = np.mean((train_pred_unscaled - y_train_unscaled)**2)\n    mse_val_unscaled = np.mean((val_pred_unscaled - y_val_unscaled)**2)\n\n    rmse_val_unscaled = np.sqrt(mse_val_unscaled)\n\n\nprint(f\"Scaled MSE on train set: {scaled_mse_train:.4f}\")  \nprint(f\"Scaled MSE on validation set: {scaled_mse_val:.4f}\") \nprint(f\"Unscaled RMSE on validation set: {rmse_val_unscaled.item():.0f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:25.251751Z","iopub.execute_input":"2025-06-19T20:37:25.252026Z","iopub.status.idle":"2025-06-19T20:37:35.002704Z","shell.execute_reply.started":"2025-06-19T20:37:25.252008Z","shell.execute_reply":"2025-06-19T20:37:35.001984Z"}},"outputs":[{"name":"stdout","text":"Model 1:\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Scaled MSE on train set: 0.0435\nScaled MSE on validation set: 0.1714\nUnscaled RMSE on validation set: 221\n","output_type":"stream"}],"execution_count":37},{"cell_type":"code","source":"weight_decay_values = [0.0, 0.01, 0.001, 0.005, 0.008]\ndropout_prob = [0.3, 0.5, 0.6, 0.7]\n\nresults = {}\n\nfor do_val in dropout_prob:\n    for wd_val in weight_decay_values:\n        \n        hyperparams_key = f\"WD={wd_val}, DO={do_val}\"\n        print(f\"\\n--- Training with: {hyperparams_key} ---\")\n    \n        model_1 = FlexibleModel(in_features=780, hidden_layers_sizes=hidden_config_1, dropout_prob=do_val)\n    \n        optimizer_1 = torch.optim.Adam(model_1.parameters(), lr=0.001, weight_decay=wd_val)\n    \n        model_1.to(device)\n    \n        num_epochs = 1500\n        loss_list1 = []\n        val_loss_list1 = []\n        \n        for epoch in range(num_epochs):\n            model_1.train()\n        \n            # Forward pass\n            y_pred = model_1(X_train)\n            loss = F.mse_loss(y_pred, y_train)\n        \n            # Backward + optimize\n            optimizer_1.zero_grad()\n            loss.backward()\n            optimizer_1.step()\n        \n            loss_list1.append(loss.item())\n        \n            # Validation\n            model_1.eval()\n            with torch.no_grad():\n                val_pred = model_1(X_val)\n                val_loss = F.mse_loss(val_pred, y_val)\n                val_loss_list1.append(val_loss.item())\n    \n        final_val_loss = val_loss_list1[-1]\n        results[hyperparams_key] = final_val_loss\n        \n        print(f\"    Finished. Final Validation MSE: {final_val_loss:.6f}\")\n\nprint(\"\\n--- Grid Search Complete ---\")\n\nbest_hyperparams = min(results, key=results.get)\nbest_loss = results[best_hyperparams]\n\nprint(f\"\\nBest Hyperparameters found: {best_hyperparams}\")\nprint(f\"Corresponding final validation MSE: {best_loss:.6f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:37:35.003489Z","iopub.execute_input":"2025-06-19T20:37:35.003763Z","iopub.status.idle":"2025-06-19T20:38:45.353581Z","shell.execute_reply.started":"2025-06-19T20:37:35.003739Z","shell.execute_reply":"2025-06-19T20:38:45.352858Z"}},"outputs":[{"name":"stdout","text":"\n--- Training with: WD=0.0, DO=0.3 ---\n    Finished. Final Validation MSE: 0.194794\n\n--- Training with: WD=0.01, DO=0.3 ---\n    Finished. Final Validation MSE: 0.172359\n\n--- Training with: WD=0.001, DO=0.3 ---\n    Finished. Final Validation MSE: 0.176069\n\n--- Training with: WD=0.005, DO=0.3 ---\n    Finished. Final Validation MSE: 0.175367\n\n--- Training with: WD=0.008, DO=0.3 ---\n    Finished. Final Validation MSE: 0.172780\n\n--- Training with: WD=0.0, DO=0.5 ---\n    Finished. Final Validation MSE: 0.201432\n\n--- Training with: WD=0.01, DO=0.5 ---\n    Finished. Final Validation MSE: 0.169048\n\n--- Training with: WD=0.001, DO=0.5 ---\n    Finished. Final Validation MSE: 0.179658\n\n--- Training with: WD=0.005, DO=0.5 ---\n    Finished. Final Validation MSE: 0.171101\n\n--- Training with: WD=0.008, DO=0.5 ---\n    Finished. Final Validation MSE: 0.174539\n\n--- Training with: WD=0.0, DO=0.6 ---\n    Finished. Final Validation MSE: 0.186748\n\n--- Training with: WD=0.01, DO=0.6 ---\n    Finished. Final Validation MSE: 0.172673\n\n--- Training with: WD=0.001, DO=0.6 ---\n    Finished. Final Validation MSE: 0.176124\n\n--- Training with: WD=0.005, DO=0.6 ---\n    Finished. Final Validation MSE: 0.171682\n\n--- Training with: WD=0.008, DO=0.6 ---\n    Finished. Final Validation MSE: 0.175758\n\n--- Training with: WD=0.0, DO=0.7 ---\n    Finished. Final Validation MSE: 0.192028\n\n--- Training with: WD=0.01, DO=0.7 ---\n    Finished. Final Validation MSE: 0.178551\n\n--- Training with: WD=0.001, DO=0.7 ---\n    Finished. Final Validation MSE: 0.182232\n\n--- Training with: WD=0.005, DO=0.7 ---\n    Finished. Final Validation MSE: 0.182291\n\n--- Training with: WD=0.008, DO=0.7 ---\n    Finished. Final Validation MSE: 0.179307\n\n--- Grid Search Complete ---\n\nBest Hyperparameters found: WD=0.01, DO=0.5\nCorresponding final validation MSE: 0.169048\n","output_type":"stream"}],"execution_count":38},{"cell_type":"markdown","source":"## Config model 2","metadata":{}},{"cell_type":"code","source":"hidden_config_2 = [256, 128]\nmodel_2 = FlexibleModel(in_features=780, hidden_layers_sizes=hidden_config_2, dropout_prob=0.7)\nprint(\"Model 2:\")\n\noptimizer_2 = torch.optim.Adam(model_2.parameters(), lr=0.001, weight_decay=0.01)\n\nmodel_2 = nn.DataParallel(model_2)\nmodel_2.to(device)\n\nnum_epochs = 1000\nloss_list2 = []\nval_loss_list2 = []\n\nfor epoch in range(num_epochs):\n    model_2.train()\n\n    # Forward pass\n    y_pred = model_2(X_train)\n    loss = F.mse_loss(y_pred, y_train)\n\n    # Backward + optimize\n    optimizer_2.zero_grad()\n    loss.backward()\n    optimizer_2.step()\n\n    loss_list2.append(loss.item())\n\n    # Validation\n    model_2.eval()\n    with torch.no_grad():\n        val_pred = model_2(X_val)\n        val_loss = F.mse_loss(val_pred, y_val)\n        val_loss_list2.append(val_loss.item())\n\nplt.plot(loss_list2, label='Train Loss')\nplt.plot(val_loss_list2, label='Validation Loss') \nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.title('Training and Validation Loss Over Epochs')\nplt.legend()\nplt.show()\n\nmodel_2.eval()\n\nwith torch.no_grad():\n    # Get scaled predictions\n    overall_train_pred_scaled = model_2(X_train)\n    overall_val_pred_scaled = model_2(X_val)\n    \n    # Calculate scaled MSE (0-1 range)\n    scaled_mse_train = F.mse_loss(overall_train_pred_scaled, y_train).item()\n    scaled_mse_val = F.mse_loss(overall_val_pred_scaled, y_val).item()\n\n    train_pred_unscaled = scaler_y.inverse_transform(overall_train_pred_scaled.detach().cpu().numpy())\n    val_pred_unscaled = scaler_y.inverse_transform(overall_val_pred_scaled.detach().cpu().numpy())\n    \n    # Then inverse transform the true values\n    y_train_unscaled = scaler_y.inverse_transform(y_train.detach().cpu().numpy())\n    y_val_unscaled = scaler_y.inverse_transform(y_val.detach().cpu().numpy())\n\n    # Now calculate MSE on original scale\n    mse_train_unscaled = np.mean((train_pred_unscaled - y_train_unscaled)**2)\n    mse_val_unscaled = np.mean((val_pred_unscaled - y_val_unscaled)**2)\n\n    rmse_val_unscaled = np.sqrt(mse_val_unscaled)\n\n\nprint(f\"Scaled MSE on train set: {scaled_mse_train:.4f}\")  \nprint(f\"Scaled MSE on validation set: {scaled_mse_val:.4f}\")  \nprint(f\"Unscaled RMSE on validation set: {rmse_val_unscaled.item():.0f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:38:45.354309Z","iopub.execute_input":"2025-06-19T20:38:45.354522Z","iopub.status.idle":"2025-06-19T20:38:51.898376Z","shell.execute_reply.started":"2025-06-19T20:38:45.354484Z","shell.execute_reply":"2025-06-19T20:38:51.897828Z"}},"outputs":[{"name":"stdout","text":"Model 2:\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Scaled MSE on train set: 0.0555\nScaled MSE on validation set: 0.1626\nUnscaled RMSE on validation set: 216\n","output_type":"stream"}],"execution_count":39},{"cell_type":"code","source":"weight_decay_values = [0.0, 0.01, 0.001, 0.005, 0.008]\ndropout_prob = [0.3, 0.5, 0.6, 0.7]\n\nresults = {}\n\nfor do_val in dropout_prob:\n    for wd_val in weight_decay_values:\n        \n        hyperparams_key = f\"WD={wd_val}, DO={do_val}\"\n        print(f\"\\n--- Training with: {hyperparams_key} ---\")\n    \n        model_2 = FlexibleModel(in_features=780, hidden_layers_sizes=hidden_config_2, dropout_prob=do_val)\n    \n        optimizer_2 = torch.optim.Adam(model_2.parameters(), lr=0.001, weight_decay=wd_val)\n    \n        model_2.to(device)\n    \n        num_epochs = 1000\n        loss_list2 = []\n        val_loss_list2 = []\n        \n        for epoch in range(num_epochs):\n            model_2.train()\n        \n            # Forward pass\n            y_pred = model_2(X_train)\n            loss = F.mse_loss(y_pred, y_train)\n        \n            # Backward + optimize\n            optimizer_2.zero_grad()\n            loss.backward()\n            optimizer_2.step()\n        \n            loss_list2.append(loss.item())\n        \n            # Validation\n            model_2.eval()\n            with torch.no_grad():\n                val_pred = model_2(X_val)\n                val_loss = F.mse_loss(val_pred, y_val)\n                val_loss_list2.append(val_loss.item())\n    \n        final_val_loss = val_loss_list2[-1]\n        results[hyperparams_key] = final_val_loss\n        \n        print(f\"    Finished. Final Validation MSE: {final_val_loss:.6f}\")\n\nprint(\"\\n--- Grid Search Complete ---\")\n\nbest_hyperparams = min(results, key=results.get)\nbest_loss = results[best_hyperparams]\n\nprint(f\"\\nBest Hyperparameters found: {best_hyperparams}\")\nprint(f\"Corresponding final validation MSE: {best_loss:.6f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:38:51.899091Z","iopub.execute_input":"2025-06-19T20:38:51.899301Z","iopub.status.idle":"2025-06-19T20:40:23.496823Z","shell.execute_reply.started":"2025-06-19T20:38:51.899284Z","shell.execute_reply":"2025-06-19T20:40:23.496031Z"}},"outputs":[{"name":"stdout","text":"\n--- Training with: WD=0.0, DO=0.3 ---\n    Finished. Final Validation MSE: 0.186131\n\n--- Training with: WD=0.01, DO=0.3 ---\n    Finished. Final Validation MSE: 0.166901\n\n--- Training with: WD=0.001, DO=0.3 ---\n    Finished. Final Validation MSE: 0.172269\n\n--- Training with: WD=0.005, DO=0.3 ---\n    Finished. Final Validation MSE: 0.167550\n\n--- Training with: WD=0.008, DO=0.3 ---\n    Finished. Final Validation MSE: 0.166572\n\n--- Training with: WD=0.0, DO=0.5 ---\n    Finished. Final Validation MSE: 0.190852\n\n--- Training with: WD=0.01, DO=0.5 ---\n    Finished. Final Validation MSE: 0.165509\n\n--- Training with: WD=0.001, DO=0.5 ---\n    Finished. Final Validation MSE: 0.174235\n\n--- Training with: WD=0.005, DO=0.5 ---\n    Finished. Final Validation MSE: 0.168026\n\n--- Training with: WD=0.008, DO=0.5 ---\n    Finished. Final Validation MSE: 0.169170\n\n--- Training with: WD=0.0, DO=0.6 ---\n    Finished. Final Validation MSE: 0.187247\n\n--- Training with: WD=0.01, DO=0.6 ---\n    Finished. Final Validation MSE: 0.165362\n\n--- Training with: WD=0.001, DO=0.6 ---\n    Finished. Final Validation MSE: 0.176004\n\n--- Training with: WD=0.005, DO=0.6 ---\n    Finished. Final Validation MSE: 0.167298\n\n--- Training with: WD=0.008, DO=0.6 ---\n    Finished. Final Validation MSE: 0.165861\n\n--- Training with: WD=0.0, DO=0.7 ---\n    Finished. Final Validation MSE: 0.183998\n\n--- Training with: WD=0.01, DO=0.7 ---\n    Finished. Final Validation MSE: 0.166086\n\n--- Training with: WD=0.001, DO=0.7 ---\n    Finished. Final Validation MSE: 0.173039\n\n--- Training with: WD=0.005, DO=0.7 ---\n    Finished. Final Validation MSE: 0.167587\n\n--- Training with: WD=0.008, DO=0.7 ---\n    Finished. Final Validation MSE: 0.172033\n\n--- Grid Search Complete ---\n\nBest Hyperparameters found: WD=0.01, DO=0.6\nCorresponding final validation MSE: 0.165362\n","output_type":"stream"}],"execution_count":40},{"cell_type":"markdown","source":"## Config model 3","metadata":{}},{"cell_type":"code","source":"hidden_config_3 = [256, 128, 64]\nmodel_3 = FlexibleModel(in_features=780, hidden_layers_sizes=hidden_config_3, dropout_prob=0.6)\nprint(\"Model 3:\")\n\noptimizer_3 = torch.optim.Adam(model_3.parameters(), lr=0.001, weight_decay=0.008)\n\nmodel_3 = nn.DataParallel(model_3)\nmodel_3.to(device)\n\nnum_epochs = 1000\nloss_list3 = []\nval_loss_list3 = []\n\nfor epoch in range(num_epochs):\n    model_3.train()\n\n    # Forward pass\n    y_pred = model_3(X_train)\n    loss = F.mse_loss(y_pred, y_train)\n\n    # Backward + optimize\n    optimizer_3.zero_grad()\n    loss.backward()\n    optimizer_3.step()\n\n    loss_list3.append(loss.item())\n\n    # Validation\n    model_3.eval()\n    with torch.no_grad():\n        val_pred = model_3(X_val)\n        val_loss = F.mse_loss(val_pred, y_val)\n        val_loss_list3.append(val_loss.item())\n\nplt.plot(loss_list3, label='Train Loss')\nplt.plot(val_loss_list3, label='Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.title('Training and Validation Loss Over Epochs')\nplt.legend()\nplt.show()\n\nmodel_3.eval() \nwith torch.no_grad():\n    # Get scaled predictions\n    overall_train_pred_scaled = model_3(X_train)\n    overall_val_pred_scaled = model_3(X_val)\n    \n    # Calculate scaled MSE (0-1 range)\n    scaled_mse_train = F.mse_loss(overall_train_pred_scaled, y_train).item()\n    scaled_mse_val = F.mse_loss(overall_val_pred_scaled, y_val).item()\n\n    train_pred_unscaled = scaler_y.inverse_transform(overall_train_pred_scaled.detach().cpu().numpy())\n    val_pred_unscaled = scaler_y.inverse_transform(overall_val_pred_scaled.detach().cpu().numpy())\n    \n    # Then inverse transform the true values\n    y_train_unscaled = scaler_y.inverse_transform(y_train.detach().cpu().numpy())\n    y_val_unscaled = scaler_y.inverse_transform(y_val.detach().cpu().numpy())\n\n    # Now calculate MSE on original scale\n    mse_train_unscaled = np.mean((train_pred_unscaled - y_train_unscaled)**2)\n    mse_val_unscaled = np.mean((val_pred_unscaled - y_val_unscaled)**2)\n\n    rmse_val_unscaled = np.sqrt(mse_val_unscaled)\n\n\nprint(f\"Scaled MSE on train set: {scaled_mse_train:.4f}\")  \nprint(f\"Scaled MSE on validation set: {scaled_mse_val:.4f}\")  \nprint(f\"Unscaled RMSE on validation set: {rmse_val_unscaled.item():.0f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:40:23.501195Z","iopub.execute_input":"2025-06-19T20:40:23.501411Z","iopub.status.idle":"2025-06-19T20:40:30.772690Z","shell.execute_reply.started":"2025-06-19T20:40:23.501393Z","shell.execute_reply":"2025-06-19T20:40:30.772120Z"}},"outputs":[{"name":"stdout","text":"Model 3:\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Scaled MSE on train set: 0.0540\nScaled MSE on validation set: 0.1756\nUnscaled RMSE on validation set: 224\n","output_type":"stream"}],"execution_count":41},{"cell_type":"code","source":"weight_decay_values = [0.0, 0.01, 0.001, 0.005, 0.008]\ndropout_prob = [0.3, 0.5, 0.6, 0.7]\n\nresults = {}\n\nfor do_val in dropout_prob:\n    for wd_val in weight_decay_values:\n        \n        hyperparams_key = f\"WD={wd_val}, DO={do_val}\"\n        print(f\"\\n--- Training with: {hyperparams_key} ---\")\n    \n        model_3 = FlexibleModel(in_features=780, hidden_layers_sizes=hidden_config_3, dropout_prob=do_val)\n    \n        optimizer_3 = torch.optim.Adam(model_3.parameters(), lr=0.001, weight_decay=wd_val)\n    \n        model_3.to(device)\n    \n        num_epochs = 1000\n        loss_list3 = []\n        val_loss_list3 = []\n        \n        for epoch in range(num_epochs):\n            model_3.train()\n        \n            # Forward pass\n            y_pred = model_3(X_train)\n            loss = F.mse_loss(y_pred, y_train)\n        \n            # Backward + optimize\n            optimizer_3.zero_grad()\n            loss.backward()\n            optimizer_3.step()\n        \n            loss_list3.append(loss.item())\n        \n            # Validation\n            model_3.eval()\n            with torch.no_grad():\n                val_pred = model_3(X_val)\n                val_loss = F.mse_loss(val_pred, y_val)\n                val_loss_list3.append(val_loss.item())\n    \n        final_val_loss = val_loss_list3[-1]\n        results[hyperparams_key] = final_val_loss\n        \n        print(f\"    Finished. Final Validation MSE: {final_val_loss:.6f}\")\n\nprint(\"\\n--- Grid Search Complete ---\")\n\nbest_hyperparams = min(results, key=results.get)\nbest_loss = results[best_hyperparams]\n\nprint(f\"\\nBest Hyperparameters found: {best_hyperparams}\")\nprint(f\"Corresponding final validation MSE: {best_loss:.6f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:40:30.773657Z","iopub.execute_input":"2025-06-19T20:40:30.774070Z","iopub.status.idle":"2025-06-19T20:42:07.419296Z","shell.execute_reply.started":"2025-06-19T20:40:30.774049Z","shell.execute_reply":"2025-06-19T20:42:07.418542Z"}},"outputs":[{"name":"stdout","text":"\n--- Training with: WD=0.0, DO=0.3 ---\n    Finished. Final Validation MSE: 0.184678\n\n--- Training with: WD=0.01, DO=0.3 ---\n    Finished. Final Validation MSE: 0.163783\n\n--- Training with: WD=0.001, DO=0.3 ---\n    Finished. Final Validation MSE: 0.176075\n\n--- Training with: WD=0.005, DO=0.3 ---\n    Finished. Final Validation MSE: 0.172679\n\n--- Training with: WD=0.008, DO=0.3 ---\n    Finished. Final Validation MSE: 0.173916\n\n--- Training with: WD=0.0, DO=0.5 ---\n    Finished. Final Validation MSE: 0.191937\n\n--- Training with: WD=0.01, DO=0.5 ---\n    Finished. Final Validation MSE: 0.166521\n\n--- Training with: WD=0.001, DO=0.5 ---\n    Finished. Final Validation MSE: 0.175299\n\n--- Training with: WD=0.005, DO=0.5 ---\n    Finished. Final Validation MSE: 0.170909\n\n--- Training with: WD=0.008, DO=0.5 ---\n    Finished. Final Validation MSE: 0.167319\n\n--- Training with: WD=0.0, DO=0.6 ---\n    Finished. Final Validation MSE: 0.186640\n\n--- Training with: WD=0.01, DO=0.6 ---\n    Finished. Final Validation MSE: 0.168637\n\n--- Training with: WD=0.001, DO=0.6 ---\n    Finished. Final Validation MSE: 0.177890\n\n--- Training with: WD=0.005, DO=0.6 ---\n    Finished. Final Validation MSE: 0.175494\n\n--- Training with: WD=0.008, DO=0.6 ---\n    Finished. Final Validation MSE: 0.172824\n\n--- Training with: WD=0.0, DO=0.7 ---\n    Finished. Final Validation MSE: 0.189327\n\n--- Training with: WD=0.01, DO=0.7 ---\n    Finished. Final Validation MSE: 0.179772\n\n--- Training with: WD=0.001, DO=0.7 ---\n    Finished. Final Validation MSE: 0.182031\n\n--- Training with: WD=0.005, DO=0.7 ---\n    Finished. Final Validation MSE: 0.179486\n\n--- Training with: WD=0.008, DO=0.7 ---\n    Finished. Final Validation MSE: 0.181779\n\n--- Grid Search Complete ---\n\nBest Hyperparameters found: WD=0.01, DO=0.3\nCorresponding final validation MSE: 0.163783\n","output_type":"stream"}],"execution_count":42},{"cell_type":"markdown","source":"## Config model 4","metadata":{}},{"cell_type":"code","source":"hidden_config_4 = [512, 256, 128, 64]\nmodel_4 = FlexibleModel(in_features=780, hidden_layers_sizes=hidden_config_4, dropout_prob=0.7)\nprint(\"Model 4:\")\n\noptimizer_4 = torch.optim.Adam(model_4.parameters(), lr=0.001, weight_decay=0.001)\n\nmodel_4 = nn.DataParallel(model_4)\nmodel_4.to(device)\n\nnum_epochs = 1500\nloss_list4 = []\nval_loss_list4 = []\n\nfor epoch in range(num_epochs):\n    model_4.train()\n\n    # Forward pass\n    y_pred = model_4(X_train)\n    loss = F.mse_loss(y_pred, y_train)\n\n    # Backward + optimize\n    optimizer_4.zero_grad()\n    loss.backward()\n    optimizer_4.step()\n\n    loss_list4.append(loss.item())\n\n    # Validation\n    model_4.eval()\n    with torch.no_grad():\n        val_pred = model_4(X_val)\n        val_loss = F.mse_loss(val_pred, y_val)\n        val_loss_list4.append(val_loss.item())\n\nplt.plot(loss_list4, label='Train Loss')\nplt.plot(val_loss_list4, label='Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.title('Training and Validation Loss Over Epochs')\nplt.legend()\nplt.show()\n\nmodel_4.eval() \nwith torch.no_grad():\n    # Get scaled predictions\n    overall_train_pred_scaled = model_4(X_train)\n    overall_val_pred_scaled = model_4(X_val)\n    \n    # Calculate scaled MSE (0-1 range)\n    scaled_mse_train = F.mse_loss(overall_train_pred_scaled, y_train).item()\n    scaled_mse_val = F.mse_loss(overall_val_pred_scaled, y_val).item()\n\n    train_pred_unscaled = scaler_y.inverse_transform(overall_train_pred_scaled.detach().cpu().numpy())\n    val_pred_unscaled = scaler_y.inverse_transform(overall_val_pred_scaled.detach().cpu().numpy())\n    \n    # Then inverse transform the true values\n    y_train_unscaled = scaler_y.inverse_transform(y_train.detach().cpu().numpy())\n    y_val_unscaled = scaler_y.inverse_transform(y_val.detach().cpu().numpy())\n\n    # Now calculate MSE on original scale\n    mse_train_unscaled = np.mean((train_pred_unscaled - y_train_unscaled)**2)\n    mse_val_unscaled = np.mean((val_pred_unscaled - y_val_unscaled)**2)\n\n    rmse_val_unscaled = np.sqrt(mse_val_unscaled)\n\n\nprint(f\"Scaled MSE on train set: {scaled_mse_train:.4f}\")  \nprint(f\"Scaled MSE on validation set: {scaled_mse_val:.4f}\")  \nprint(f\"Unscaled RMSE on validation set: {rmse_val_unscaled.item():.0f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:42:07.420187Z","iopub.execute_input":"2025-06-19T20:42:07.420782Z","iopub.status.idle":"2025-06-19T20:42:20.615105Z","shell.execute_reply.started":"2025-06-19T20:42:07.420756Z","shell.execute_reply":"2025-06-19T20:42:20.614543Z"}},"outputs":[{"name":"stdout","text":"Model 4:\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Scaled MSE on train set: 0.0505\nScaled MSE on validation set: 0.1897\nUnscaled RMSE on validation set: 233\n","output_type":"stream"}],"execution_count":43},{"cell_type":"code","source":"weight_decay_values = [0.0, 0.01, 0.001, 0.005, 0.008]\ndropout_prob = [0.3, 0.5, 0.6, 0.7]\n\nresults = {}\n\nfor do_val in dropout_prob:\n    for wd_val in weight_decay_values:\n        \n        hyperparams_key = f\"WD={wd_val}, DO={do_val}\"\n        print(f\"\\n--- Training with: {hyperparams_key} ---\")\n    \n        model_4 = FlexibleModel(in_features=780, hidden_layers_sizes=hidden_config_4, dropout_prob=do_val)\n    \n        optimizer_4 = torch.optim.Adam(model_4.parameters(), lr=0.001, weight_decay=wd_val)\n    \n        model_4.to(device)\n    \n        num_epochs = 1500\n        loss_list4 = []\n        val_loss_list4 = []\n        \n        for epoch in range(num_epochs):\n            model_4.train()\n        \n            # Forward pass\n            y_pred = model_4(X_train)\n            loss = F.mse_loss(y_pred, y_train)\n        \n            # Backward + optimize\n            optimizer_4.zero_grad()\n            loss.backward()\n            optimizer_4.step()\n        \n            loss_list4.append(loss.item())\n        \n            # Validation\n            model_4.eval()\n            with torch.no_grad():\n                val_pred = model_4(X_val)\n                val_loss = F.mse_loss(val_pred, y_val)\n                val_loss_list4.append(val_loss.item())\n    \n        final_val_loss = val_loss_list4[-1]\n        results[hyperparams_key] = final_val_loss\n        \n        print(f\"    Finished. Final Validation MSE: {final_val_loss:.6f}\")\n\nprint(\"\\n--- Grid Search Complete ---\")\n\nbest_hyperparams = min(results, key=results.get)\nbest_loss = results[best_hyperparams]\n\nprint(f\"\\nBest Hyperparameters found: {best_hyperparams}\")\nprint(f\"Corresponding final validation MSE: {best_loss:.6f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:42:20.615818Z","iopub.execute_input":"2025-06-19T20:42:20.616060Z","iopub.status.idle":"2025-06-19T20:47:49.454989Z","shell.execute_reply.started":"2025-06-19T20:42:20.616032Z","shell.execute_reply":"2025-06-19T20:47:49.454355Z"}},"outputs":[{"name":"stdout","text":"\n--- Training with: WD=0.0, DO=0.3 ---\n    Finished. Final Validation MSE: 0.179067\n\n--- Training with: WD=0.01, DO=0.3 ---\n    Finished. Final Validation MSE: 0.179904\n\n--- Training with: WD=0.001, DO=0.3 ---\n    Finished. Final Validation MSE: 0.173659\n\n--- Training with: WD=0.005, DO=0.3 ---\n    Finished. Final Validation MSE: 0.172589\n\n--- Training with: WD=0.008, DO=0.3 ---\n    Finished. Final Validation MSE: 0.204833\n\n--- Training with: WD=0.0, DO=0.5 ---\n    Finished. Final Validation MSE: 0.182158\n\n--- Training with: WD=0.01, DO=0.5 ---\n    Finished. Final Validation MSE: 0.181867\n\n--- Training with: WD=0.001, DO=0.5 ---\n    Finished. Final Validation MSE: 0.168810\n\n--- Training with: WD=0.005, DO=0.5 ---\n    Finished. Final Validation MSE: 0.163233\n\n--- Training with: WD=0.008, DO=0.5 ---\n    Finished. Final Validation MSE: 0.171287\n\n--- Training with: WD=0.0, DO=0.6 ---\n    Finished. Final Validation MSE: 0.183561\n\n--- Training with: WD=0.01, DO=0.6 ---\n    Finished. Final Validation MSE: 0.193156\n\n--- Training with: WD=0.001, DO=0.6 ---\n    Finished. Final Validation MSE: 0.174875\n\n--- Training with: WD=0.005, DO=0.6 ---\n    Finished. Final Validation MSE: 0.174207\n\n--- Training with: WD=0.008, DO=0.6 ---\n    Finished. Final Validation MSE: 0.173952\n\n--- Training with: WD=0.0, DO=0.7 ---\n    Finished. Final Validation MSE: 0.186767\n\n--- Training with: WD=0.01, DO=0.7 ---\n    Finished. Final Validation MSE: 0.193729\n\n--- Training with: WD=0.001, DO=0.7 ---\n    Finished. Final Validation MSE: 0.184455\n\n--- Training with: WD=0.005, DO=0.7 ---\n    Finished. Final Validation MSE: 0.188452\n\n--- Training with: WD=0.008, DO=0.7 ---\n    Finished. Final Validation MSE: 0.186246\n\n--- Grid Search Complete ---\n\nBest Hyperparameters found: WD=0.005, DO=0.5\nCorresponding final validation MSE: 0.163233\n","output_type":"stream"}],"execution_count":44},{"cell_type":"markdown","source":"# Final testing","metadata":{}},{"cell_type":"code","source":"trained_models = {\n    \"Model with hidden_config_nn\": model_nn,\n    \"Model with hidden_config_1\": model_1,\n    \"Model with hidden_config_2\": model_2,\n    \"Model with hidden_config_3\": model_3,\n    \"Model with hidden_config_4\": model_4\n}\n\nresults = {}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:47:49.455784Z","iopub.execute_input":"2025-06-19T20:47:49.456018Z","iopub.status.idle":"2025-06-19T20:47:49.459939Z","shell.execute_reply.started":"2025-06-19T20:47:49.456000Z","shell.execute_reply":"2025-06-19T20:47:49.459153Z"}},"outputs":[],"execution_count":45},{"cell_type":"code","source":"X_test = torch.tensor(X_test_scaled, dtype=torch.float32).to(device) \ny_test = torch.tensor(y_test_scaled, dtype=torch.float32).to(device) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:47:49.460789Z","iopub.execute_input":"2025-06-19T20:47:49.460993Z","iopub.status.idle":"2025-06-19T20:47:49.484532Z","shell.execute_reply.started":"2025-06-19T20:47:49.460974Z","shell.execute_reply":"2025-06-19T20:47:49.483944Z"}},"outputs":[],"execution_count":46},{"cell_type":"code","source":"for model_name, model in sorted(trained_models.items()):\n    print(f\"--- Evaluating {model_name} ---\")\n\n    model.eval()\n\n    with torch.no_grad():\n        test_pred_scaled = model(X_test)\n\n        scaled_mse_test = F.mse_loss(test_pred_scaled, y_test).item()\n\n        test_pred_unscaled = scaler_y.inverse_transform(test_pred_scaled.detach().cpu().numpy())\n\n        y_test_unscaled = scaler_y.inverse_transform(y_test.detach().cpu().numpy())\n\n        mse_test_unscaled = np.mean((test_pred_unscaled - y_test_unscaled)**2)\n        rmse_test_unscaled = np.sqrt(mse_test_unscaled)\n\n        results[model_name] = {\n            'scaled_mse': scaled_mse_test,\n            'unscaled_rmse': rmse_test_unscaled\n        }\n\n        print(f\"Scaled MSE on test set: {scaled_mse_test:.4f}\")\n        print(f\"Unscaled RMSE on test set: {rmse_test_unscaled:.0f}\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T20:47:49.485268Z","iopub.execute_input":"2025-06-19T20:47:49.485554Z","iopub.status.idle":"2025-06-19T20:47:49.499676Z","shell.execute_reply.started":"2025-06-19T20:47:49.485528Z","shell.execute_reply":"2025-06-19T20:47:49.499041Z"}},"outputs":[{"name":"stdout","text":"--- Evaluating Model with hidden_config_1 ---\nScaled MSE on test set: 0.1637\nUnscaled RMSE on test set: 216\n\n--- Evaluating Model with hidden_config_2 ---\nScaled MSE on test set: 0.1493\nUnscaled RMSE on test set: 207\n\n--- Evaluating Model with hidden_config_3 ---\nScaled MSE on test set: 0.1652\nUnscaled RMSE on test set: 217\n\n--- Evaluating Model with hidden_config_4 ---\nScaled MSE on test set: 0.1810\nUnscaled RMSE on test set: 228\n\n--- Evaluating Model with hidden_config_nn ---\nScaled MSE on test set: 0.2137\nUnscaled RMSE on test set: 247\n\n","output_type":"stream"}],"execution_count":47},{"cell_type":"markdown","source":"# Conclusion","metadata":{}},{"cell_type":"markdown","source":"Models 1, 2, and 3 perform slightly better than the others, with an overall test RMSE suggesting they can provide decent predictions. While further reducing the error proved challenging with the current data and approach, a standard deviation of around ~200 is still acceptable for the platform's use case.\n\nGiven that the reach prediction is meant to be a rough estimate (not an exact number), the modelâ€™s output could be presented as a range. For example, a prediction of 800 might be displayed as: \"Your post has the potential to reach 600â€“1,000 people on LinkedIn.\" In this context, the margin of error seems reasonable and aligns with user expectations.\n\nSeveral steps were omitted in the current implementation but could enhance the modelâ€™s performance:\n\n1. Log Transformation: A log transform might have improved results if applied correctly, potentially reducing the final RMSE.\n2. Early Stopping: Not implemented, which could have prevented overfitting and optimized training time.\n3. DataLoader Utilization: Could accelerate training by improving data pipeline efficiency.\n4. Hyperparameter Tuning: Random Search may yield better parameters than Grid Search while being more computationally efficient.\n5. Additional Data: As always, more training data would likely improve generalization and predictive power.\n6. More Ifs statements: To make the models more reliable in case of badly formated data.","metadata":{}},{"cell_type":"markdown","source":"# Knowledge gained","metadata":{}},{"cell_type":"markdown","source":"Through this project, the author gained hands-on experience in several areas:\n1. OOP: Creating and working with class objects\n2. Hardware Acceleration: Utilizing GPU computing to speed up model training\n3. Data Structures: Handling and manipulating data using dictionaries\n4. NLP Fundamentals: Understanding tokenization and embedding mechanisms\n5. Data Type Management: Recognizing and converting between different data formats to fit different models/functions (tensors to numpy arrays etc.)\n6. Model Development: Building neural networks and optimizing their performance through hyperparameter tuning\n7. Project Execution: Successfully transforming an initial concept into a functional implementation","metadata":{}}]}
